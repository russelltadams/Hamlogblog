import os
import datetime
from PIL import Image, ImageDraw, ImageFont
import tempfile
from config_manager import get_config_value

def generate_qsl_card(contact, header):
    """Generate QSL card for a contact"""
    # Card dimensions
    width, height = 600, 400
    
    # Create image with white background
    img = Image.new('RGB', (width, height), 'white')
    draw = ImageDraw.Draw(img)
    
    # Try to use a built-in font, fallback to default
    try:
        title_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 24)
        header_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 18)
        content_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 14)
        small_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 12)
    except:
        # Fallback to default font
        title_font = ImageFont.load_default()
        header_font = ImageFont.load_default()
        content_font = ImageFont.load_default()
        small_font = ImageFont.load_default()
    
    # Colors
    black = '#000000'
    blue = '#0066cc'
    gray = '#666666'
    
    # Draw border
    draw.rectangle([10, 10, width-10, height-10], outline=black, width=2)
    
    # Header
    station_call = header.get('station_callsign', contact.get('station_callsign', get_config_value('station.call_sign', 'N0CALL')))
    draw.text((30, 30), f"QSL CARD - {station_call}", fill=blue, font=title_font)
    
    # Contact info
    call = contact.get('call', '')
    draw.text((30, 70), f"CONTACT WITH: {call}", fill=black, font=header_font)
    
    # QSO Details
    y_pos = 110
    
    # Date and Time
    qso_date = contact.get('qso_date', '')
    time_on = contact.get('time_on', '')
    if qso_date:
        date_str = format_display_date(qso_date)
        draw.text((30, y_pos), f"DATE: {date_str}", fill=black, font=content_font)
    if time_on:
        time_str = format_display_time(time_on)
        draw.text((200, y_pos), f"TIME: {time_str} UTC", fill=black, font=content_font)
    y_pos += 25
    
    # Band and Mode
    band = contact.get('band', '')
    mode = contact.get('mode', '')
    freq = contact.get('freq', '')
    
    if band:
        draw.text((30, y_pos), f"BAND: {band}", fill=black, font=content_font)
    if mode:
        draw.text((150, y_pos), f"MODE: {mode}", fill=black, font=content_font)
    if freq:
        draw.text((250, y_pos), f"FREQ: {freq} MHz", fill=black, font=content_font)
    y_pos += 25
    
    # Signal Reports
    rst_sent = contact.get('rst_sent', '')
    rst_rcvd = contact.get('rst_rcvd', '')
    
    # Handle RST display based on mode
    if mode and is_digital_mode(mode):
        rst_sent_display = f"N/A ({mode})" if not rst_sent else rst_sent
        rst_rcvd_display = f"N/A ({mode})" if not rst_rcvd else rst_rcvd
    else:
        rst_sent_display = rst_sent if rst_sent else "N/A"
        rst_rcvd_display = rst_rcvd if rst_rcvd else "N/A"
    
    draw.text((30, y_pos), f"RST SENT: {rst_sent_display}", fill=black, font=content_font)
    draw.text((200, y_pos), f"RST RCVD: {rst_rcvd_display}", fill=black, font=content_font)
    y_pos += 25
    
    # Location info
    country = contact.get('country', '')
    state = contact.get('state', '')
    gridsquare = contact.get('gridsquare', '')
    
    if country:
        draw.text((30, y_pos), f"COUNTRY: {country}", fill=black, font=content_font)
        y_pos += 20
    
    if state:
        draw.text((30, y_pos), f"STATE: {state}", fill=black, font=content_font)
    if gridsquare:
        draw.text((200, y_pos), f"GRID: {gridsquare}", fill=black, font=content_font)
    y_pos += 25
    
    # QSL confirmation
    qsl_sent = contact.get('qsl_sent', '')
    qsl_rcvd = contact.get('qsl_rcvd', '')
    
    y_pos += 10
    draw.text((30, y_pos), "QSL:", fill=black, font=content_font)
    
    if qsl_sent and qsl_sent.upper() in ['Y', 'YES']:
        draw.text((80, y_pos), "☑ SENT", fill=black, font=content_font)
    else:
        draw.text((80, y_pos), "☐ SENT", fill=gray, font=content_font)
    
    if qsl_rcvd and qsl_rcvd.upper() in ['Y', 'YES']:
        draw.text((150, y_pos), "☑ RCVD", fill=black, font=content_font)
    else:
        draw.text((150, y_pos), "☐ RCVD", fill=gray, font=content_font)
    
    # Comments
    comment = contact.get('comment', contact.get('comments', ''))
    if comment:
        y_pos += 25
        draw.text((30, y_pos), f"COMMENTS: {comment[:50]}", fill=black, font=small_font)
    
    # Footer
    footer_text = f"Generated by QSOWhat - {datetime.datetime.now().strftime('%Y-%m-%d')}"
    draw.text((30, height-40), footer_text, fill=gray, font=small_font)
    
    # Thank you message
    thank_you = get_config_value('qsl.default_message', '73s and thanks for the contact!')
    text_width = draw.textlength(thank_you, font=content_font)
    draw.text((width - text_width - 30, height-40), thank_you, fill=blue, font=content_font)
    
    # Save to temporary file
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"QSL_{call}_{timestamp}.png"
    
    temp_dir = tempfile.gettempdir()
    temp_path = os.path.join(temp_dir, filename)
    
    img.save(temp_path, 'PNG')
    return temp_path

def format_display_date(date_str):
    """Format date for display"""
    try:
        if len(date_str) == 8:  # YYYYMMDD
            return f"{date_str[6:8]}/{date_str[4:6]}/{date_str[0:4]}"
        elif '-' in date_str:  # YYYY-MM-DD
            parts = date_str.split('-')
            return f"{parts[2]}/{parts[1]}/{parts[0]}"
    except:
        pass
    return date_str

def format_display_time(time_str):
    """Format time for display"""
    try:
        if len(time_str) >= 4:
            if ':' in time_str:
                return time_str[:5]  # HH:MM
            else:
                return f"{time_str[0:2]}:{time_str[2:4]}"  # HHMM -> HH:MM
    except:
        pass
    return time_str

def is_digital_mode(mode):
    """Check if mode is digital (RST not applicable)"""
    digital_modes = ['FT8', 'FT4', 'JS8', 'PSK31', 'RTTY', 'DIGITAL', 'DATA', 'JT65', 'JT9', 'MSK144']
    return mode.upper() in digital_modes
